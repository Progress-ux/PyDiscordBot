import discord
import asyncio
import re
import yt_dlp
from collections import deque
from discord.ext import commands

YDL_OPTIONS = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'extract_flat': True,
    'quiet': True,
    'ignoreerrors': False,
}

FFMPEG_OPTIONS = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn'
}

def cleanURL(url):
    if 'playlist' not in url and 'list=' in url:
        cleaned_url = re.sub(r"(\?list=[^&]+)", "", url)
        return cleaned_url
    else:
        return url

async def create_bot():
    # –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤
    track_queue = deque()
    track_history = deque()

    # –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ\—Ç—Ä–µ–∫–∞
    isRepeat = False
    current_track = None
    should_play_next = True

    intents = discord.Intents.default()
    intents.message_content = True
    bot = commands.Bot(command_prefix="!", intents=intents)

    @bot.event
    async def on_ready():
        print(f'‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}')

    @bot.event
    async def on_message(message):
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.content}")
        await bot.process_commands(message)

    @bot.command()
    async def join(ctx):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        print("–ö–æ–º–∞–Ω–¥–∞ !join –≤—ã–∑–≤–∞–Ω–∞")
        if ctx.author.voice:
            channel = ctx.author.voice.channel
            await channel.connect()
            await ctx.send(f"–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel}")
        else:
            await ctx.send("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")

    @bot.command()
    async def leave(ctx):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if ctx.voice_client:
            await ctx.voice_client.disconnect()
        else:
            await ctx.send("–ë–æ—Ç –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")

    @bot.command()
    async def play(ctx, url: str): 
        """–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                cleanurl = cleanURL(url)

                info = ydl.extract_info(cleanurl, download=False, process=False)
                i = 0
                if 'entries' in info:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                    for entry in info['entries']:
                        track_title = entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                        track_url = entry.get('url')
                        if track_url:  
                            track_queue.append((track_title, track_url))
                            i += 1
                    await ctx.send(f"üé∂ –î–æ–±–∞–≤–ª–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ {i} —Ç—Ä–µ–∫–æ–≤!")
                else:
                    track_title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                    track_queue.append((track_title, cleanurl))
                    await ctx.send(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {track_title}")

        except Exception as e:
            await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")


        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É, –µ—Å–ª–∏ –±–æ—Ç–∞ –Ω–µ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        if not ctx.voice_client:
            await ctx.invoke(join)

        if not ctx.voice_client.is_playing():
            await play_next(ctx)

    async def play_next(ctx):
        nonlocal current_track, should_play_next

        if not should_play_next or not track_queue:
            should_play_next = True
            return
        
        if isRepeat and current_track:
            title, url = current_track
        elif track_queue:
            title, url = track_queue.popleft()
            track_history.append((title, url))
            current_track = (title, url)
        else:
            await ctx.send("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
            return

        try:
            with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                info = ydl.extract_info(url, download=False)
                url2 = info['url']
                await ctx.send(f"‚ñ∂ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {title}")
                source = discord.FFmpegPCMAudio(url2, executable="C:/ffmpeg/bin/ffmpeg.exe", **FFMPEG_OPTIONS)
                ctx.voice_client.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop)) 
        except Exception as e:
            await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    @bot.command()
    async def back(ctx):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"""
        nonlocal current_track, should_play_next, isRepeat

        if len(track_history) > 1:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
            track_queue.appendleft(current_track)

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫
            track_history.pop()
            title, url = track_history[-1]
            current_track = (title, url)

            try:
                if ctx.voice_client and ctx.voice_client.is_playing():
                    if isRepeat:
                        await repeat(ctx)
                    ctx.voice_client.stop()
                    should_play_next = False

                with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                    info = ydl.extract_info(url, download=False)
                    url2 = info['url']
                    await ctx.send(f"‚èÆ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç—Ä–µ–∫—É: {title}")
                    source = discord.FFmpegPCMAudio(url2, executable="C:/ffmpeg/bin/ffmpeg.exe", **FFMPEG_OPTIONS)
                    ctx.voice_client.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop))
            except Exception as e:
                await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        else:
            await ctx.send("‚ùå –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤!")

    @bot.command()
    async def repeat(ctx):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞"""
        nonlocal isRepeat
        isRepeat = not isRepeat
        status = "–≤–∫–ª—é—á–µ–Ω üîÅ" if isRepeat else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"
        await ctx.send(f"üîÅ –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä {status}")

    @bot.command()
    async def playlist(ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤"""
        if not track_queue:
            await ctx.send("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
            return
        
        track_list = ""
        for i, (title, url) in enumerate(track_queue, start=1):
            track_list += f"{i}. {title}\n"

        if len(track_list) > 1900:
            track_list = track_list[:1900] + "...\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞!"
        
        await ctx.send(f"üéµ **–û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤:**\n{track_list}")

    @bot.command()
    async def skip(ctx):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π"""
        nonlocal should_play_next, isRepeat
        if ctx.voice_client and ctx.voice_client.is_playing():
            if isRepeat:
                    await repeat(ctx)
            ctx.voice_client.stop()
            should_play_next = False  
            await ctx.send("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫.")
            await play_next(ctx)
        else:
            await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!")

    @bot.command()
    async def pause(ctx):
        """–°—Ç–∞–≤–∏—Ç –º—É–∑—ã–∫—É –Ω–∞ –ø–∞—É–∑—É"""
        if ctx.voice_client and ctx.voice_client.is_playing():
            ctx.voice_client.pause()
            await ctx.send("‚è∏ –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ")
        else:
            await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!")

    @bot.command()
    async def resume(ctx):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        if ctx.voice_client and ctx.voice_client.is_paused():
            ctx.voice_client.resume()
            await ctx.send("‚ñ∂ –ú—É–∑—ã–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
        else:
            await ctx.send("–ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ!")

    @bot.command()
    async def clear(ctx):
        """–û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å"""
        track_queue.clear()
        track_history.clear()
        global current_track
        current_track = None
        await ctx.send("üóë –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.")

    @bot.command()
    async def stop(ctx):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º—É–∑—ã–∫—É"""
        nonlocal should_play_next
        if ctx.voice_client and ctx.voice_client.is_playing():
            ctx.voice_client.stop()
            should_play_next = False
            await ctx.send("‚èπ –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.start("YOUR_TOKEN")
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
asyncio.run(create_bot())
